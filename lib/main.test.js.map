{
  "version": 3,
  "file": "main.test.js",
  "sourceRoot": "..",
  "sources": [
    "src/main.test.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n'use strict'\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'INTERCOURSE/MAIN'\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\nPATH                      = require 'path'\nPD                        = require 'pipedreams'\n{ $\n  $async\n  select }                = PD\n{ assign\n  jr }                    = CND\n\n#-----------------------------------------------------------------------------------------------------------\ncollapse_text = ( list_of_texts ) ->\n  R = list_of_texts\n  R = R.join '\\n'\n  R = R.replace /^\\s*/, ''\n  R = R.replace /\\s*$/, ''\n  R = R + '\\n'\n  return R\n\n#-----------------------------------------------------------------------------------------------------------\n@$as_line_datoms = ( S ) ->\n  line_nr = 0\n  return $ ( line, send ) ->\n    line_nr += +1\n    d           = PD.new_event '^line', line, $: { line_nr, }\n    d.is_blank  = true if ( d.value.match /^\\s*$/ )?\n    send d\n    return null\n\n#-----------------------------------------------------------------------------------------------------------\n@$skip_comments = ( S ) -> PD.$filter ( d ) -> not ( d.value.match S.comments )?\n\n#-----------------------------------------------------------------------------------------------------------\n@$add_headers = ( S ) ->\n  header_pattern = /// ^ (?<ictype> \\S+ ) \\s+ (?<icname> \\S+ ) \\s* : \\s*  $ ///\n  ignore_pattern = /// ^ ignore \\s* : \\s*  $ ///\n  return $ ( d, send ) =>\n    return send d if d.is_blank\n    return send d if ( d.value.match /^\\s/ )?\n    #.......................................................................................................\n    if ( match = d.value.match ignore_pattern )?\n      return send PD.new_event '^ignore', match.groups, $: d\n    #.......................................................................................................\n    if ( match = d.value.match header_pattern )?\n      return send PD.new_event '^definition', match.groups, $: d\n    #.......................................................................................................\n    throw new Error \"Âµ83473 illegal line #{rpr d}\"\n    return null\n\n#-----------------------------------------------------------------------------------------------------------\n@$add_regions = ( S ) ->\n  within_region = false\n  prv_name      = null\n  last          = Symbol 'last'\n  #.........................................................................................................\n  return $ ( d, send ) =>\n    #.......................................................................................................\n    if d is last\n      if prv_name?\n        send PD.new_event '>' + prv_name\n        prv_name = null\n      return\n    #.......................................................................................................\n    if select d, '^line'\n      return send d if within_region\n      return if d.is_blank\n      throw new Error \"Âµ85818 found line outside of any region: #{rpr d}\"\n    #.......................................................................................................\n    if prv_name?\n      send PD.new_event '>' + prv_name\n      within_region = false\n      prv_name      = null\n    #.......................................................................................................\n    unless within_region\n      ### TAINT use PipeDreams API for this ###\n      d             = CND.deep_copy d\n      prv_name      = d.key[ 1 .. ]\n      d.key         = '<' + prv_name\n      within_region = true\n      send d\n    #.......................................................................................................\n    return null\n\n#-----------------------------------------------------------------------------------------------------------\n@$skip_ignored = ( S ) ->\n  within_ignore = false\n  return $ ( d, send ) =>\n    if select d, '<ignore'\n      within_ignore = true\n    else if select d, '>ignore'\n      within_ignore = false\n    else unless within_ignore\n      send d\n    #.......................................................................................................\n    return null\n\n#-----------------------------------------------------------------------------------------------------------\n@$compile_definitions = ( S ) ->\n  this_definition   = null\n  this_indentation  = null\n  #.........................................................................................................\n  return $ ( d, send ) =>\n    #.......................................................................................................\n    if select d, '<definition'\n      name                = d.value.icname\n      type                = d.value.ictype\n      location            = d.$\n      this_definition     = { name, type, text: [], location, }\n    #.......................................................................................................\n    else if select d, '>definition'\n      this_definition.text  = collapse_text this_definition.text\n      send PD.new_event '^definition', this_definition, $: this_definition.location\n      this_definition       = null\n      this_indentation      = null\n    #.......................................................................................................\n    else if select d, '^line'\n      return this_definition.text.push '' if d.is_blank\n      text = d.value\n      #.....................................................................................................\n      unless this_indentation?\n        unless ( match = text.match /^\\s+/ )?\n          throw new Error \"Âµ88163 unexpected indentation: #{rpr d}\"\n        this_indentation = match[ 0 ]\n      #.....................................................................................................\n      else\n        unless text.startsWith this_indentation\n          throw new Error \"Âµ90508 unexpected indentation: #{rpr d}\"\n      #.....................................................................................................\n      text = text[ this_indentation.length .. ]\n      this_definition.text.push text\n    #.......................................................................................................\n    else\n      throw new Error \"Âµ92853 unexpected datom: #{rpr d}\"\n    #.......................................................................................................\n    return null\n\n#-----------------------------------------------------------------------------------------------------------\n@$collect = ( S, collector ) ->\n  return $ ( d, send ) =>\n    unless select d, '^definition'\n      throw new Error \"Âµ23982 expected a definition datom, got #{rpr d}\"\n    definition = d.value\n    if collector[ definition.name ]?\n      throw new Error \"Âµ23983 duplicate name #{definition.name}: #{rpr definition}\"\n    collector[ definition.name ] = definition\n    return null\n\n#-----------------------------------------------------------------------------------------------------------\n@read_definitions           = ( path ) -> @_read_definitions PD.read_from_file          path\n@read_definitions_from_text = ( text ) -> @_read_definitions PD.new_source_from_values  text\n\n#-----------------------------------------------------------------------------------------------------------\n@_read_definitions = ( source ) ->\n  return new Promise ( resolve, reject ) =>\n    R         = {}\n    S         = { comments: /^--/, }\n    pipeline  = []\n    pipeline.push source\n    pipeline.push PD.$split()\n    pipeline.push @$as_line_datoms        S\n    pipeline.push @$skip_comments         S\n    pipeline.push @$add_headers           S\n    pipeline.push @$add_regions           S\n    pipeline.push @$skip_ignored          S\n    pipeline.push @$compile_definitions   S\n    pipeline.push @$collect               S, R\n    pipeline.push PD.$drain -> resolve R\n    PD.pull pipeline...\n    return null\n\n\n\n\n"
  ]
}