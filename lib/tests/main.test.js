// Generated by CoffeeScript 2.3.2
(function() {
  'use strict';
  var CND, IC, badge, debug, echo, help, info, jr, rpr, test, urge, warn, whisper;

  //###########################################################################################################
  CND = require('cnd');

  rpr = CND.rpr;

  badge = 'INTERCOURSE/TESTS/MAIN';

  debug = CND.get_logger('debug', badge);

  warn = CND.get_logger('warn', badge);

  info = CND.get_logger('info', badge);

  urge = CND.get_logger('urge', badge);

  help = CND.get_logger('help', badge);

  whisper = CND.get_logger('whisper', badge);

  echo = CND.echo.bind(CND);

  //...........................................................................................................
  test = require('guy-test');

  jr = JSON.stringify;

  IC = require('../..');

  //-----------------------------------------------------------------------------------------------------------
  this["basic 1"] = async function(T, done) {
    var error, i, len, matcher, probe, probes_and_matchers;
    probes_and_matchers = [
      [
        "procedure x:\n  foo bar",
        {
          "x": {
            "name": "x",
            "type": "procedure",
            "text": "foo bar\n",
            "location": {
              "line_nr": 1
            }
          }
        },
        null
      ],
      [
        "procedure x:\n  foo bar\n",
        {
          "x": {
            "name": "x",
            "type": "procedure",
            "text": "foo bar\n",
            "location": {
              "line_nr": 1
            }
          }
        },
        null
      ],
      [
        "procedure x:\n  foo bar\n\n",
        {
          "x": {
            "name": "x",
            "type": "procedure",
            "text": "foo bar\n",
            "location": {
              "line_nr": 1
            }
          }
        },
        null
      ],
      [
        "procedure x:\n  foo bar\n\nprocedure y:\n  foo bar\n\n",
        {
          "x": {
            "name": "x",
            "type": "procedure",
            "text": "foo bar\n",
            "location": {
              "line_nr": 1
            }
          },
          "y": {
            "name": "y",
            "type": "procedure",
            "text": "foo bar\n",
            "location": {
              "line_nr": 4
            }
          }
        },
        null
      ]
    ];
//.........................................................................................................
    for (i = 0, len = probes_and_matchers.length; i < len; i++) {
      [probe, matcher, error] = probes_and_matchers[i];
      await T.perform(probe, matcher, error, function() {
        return new Promise(async function(resolve, reject) {
          var result;
          // try
          result = (await IC.read_definitions_from_text(probe));
          // catch error
          //   return resolve error.message
          // debug '29929', result
          return resolve(result);
        });
      });
    }
    done();
    return null;
  };

  //-----------------------------------------------------------------------------------------------------------
  this["signatures"] = async function(T, done) {
    var error, i, len, matcher, probe, probes_and_matchers;
    probes_and_matchers = [
      [
        "procedure foobar:\n  some text",
        {
          "foobar": {
            "name": "foobar",
            "type": "procedure",
            "text": "some text\n",
            "location": {
              "line_nr": 1
            }
          }
        },
        null
      ],
      [
        "procedure foobar():\n  some text",
        {
          "foobar": {
            "name": "foobar",
            "type": "procedure",
            "text": "some text\n",
            "location": {
              "line_nr": 1
            },
            "signature": []
          }
        },
        null
      ],
      [
        "procedure foobar( first ):\n  some text",
        {
          "foobar": {
            "name": "foobar",
            "type": "procedure",
            "text": "some text\n",
            "location": {
              "line_nr": 1
            },
            "signature": ["first"]
          }
        },
        null
      ],
      [
        "procedure foobar(first):\n  some text",
        {
          "foobar": {
            "name": "foobar",
            "type": "procedure",
            "text": "some text\n",
            "location": {
              "line_nr": 1
            },
            "signature": ["first"]
          }
        },
        null
      ],
      [
        "procedure foobar( first, ):\n  some text",
        {
          "foobar": {
            "name": "foobar",
            "type": "procedure",
            "text": "some text\n",
            "location": {
              "line_nr": 1
            },
            "signature": ["first"]
          }
        },
        null
      ],
      [
        "procedure foobar(first,):\n  some text",
        {
          "foobar": {
            "name": "foobar",
            "type": "procedure",
            "text": "some text\n",
            "location": {
              "line_nr": 1
            },
            "signature": ["first"]
          }
        },
        null
      ],
      [
        "procedure foobar( first, second ):\n  some text",
        {
          "foobar": {
            "name": "foobar",
            "type": "procedure",
            "text": "some text\n",
            "location": {
              "line_nr": 1
            },
            "signature": ["first",
        "second"]
          }
        },
        null
      ],
      [
        "procedure foobar( first, second, ):\n  some text",
        {
          "foobar": {
            "name": "foobar",
            "type": "procedure",
            "text": "some text\n",
            "location": {
              "line_nr": 1
            },
            "signature": ["first",
        "second"]
          }
        },
        null
      ]
    ];
//.........................................................................................................
    for (i = 0, len = probes_and_matchers.length; i < len; i++) {
      [probe, matcher, error] = probes_and_matchers[i];
      await T.perform(probe, matcher, error, function() {
        return new Promise(async function(resolve, reject) {
          var result;
          // try
          result = (await IC.read_definitions_from_text(probe));
          // catch error
          //   return resolve error.message
          debug('29929', result);
          return resolve(result);
        });
      });
    }
    done();
    return null;
  };

  //-----------------------------------------------------------------------------------------------------------
  this["oneliners"] = async function(T, done) {
    var error, i, len, matcher, probe, probes_and_matchers;
    probes_and_matchers = [
      [
        // ["procedure foobar:  some text\n  illegal line",null,'illegal follow-up after one-liner']
        "procedure foobar:  some text",
        {
          "foobar": {
            "name": "foobar",
            "type": "procedure",
            "text": "some text\n",
            "location": {
              "line_nr": 1
            }
          }
        },
        null
      ],
      [
        "procedure foobar():  some text",
        {
          "foobar": {
            "name": "foobar",
            "type": "procedure",
            "text": "some text\n",
            "location": {
              "line_nr": 1
            },
            "signature": []
          }
        },
        null
      ],
      [
        "procedure foobar( first ):  some text",
        {
          "foobar": {
            "name": "foobar",
            "type": "procedure",
            "text": "some text\n",
            "location": {
              "line_nr": 1
            },
            "signature": ["first"]
          }
        },
        null
      ],
      [
        "procedure foobar(first):  some text",
        {
          "foobar": {
            "name": "foobar",
            "type": "procedure",
            "text": "some text\n",
            "location": {
              "line_nr": 1
            },
            "signature": ["first"]
          }
        },
        null
      ],
      [
        "procedure foobar( first, ):  some text",
        {
          "foobar": {
            "name": "foobar",
            "type": "procedure",
            "text": "some text\n",
            "location": {
              "line_nr": 1
            },
            "signature": ["first"]
          }
        },
        null
      ],
      [
        "procedure foobar(first,):  some text",
        {
          "foobar": {
            "name": "foobar",
            "type": "procedure",
            "text": "some text\n",
            "location": {
              "line_nr": 1
            },
            "signature": ["first"]
          }
        },
        null
      ],
      [
        "procedure foobar( first, second ):  some text",
        {
          "foobar": {
            "name": "foobar",
            "type": "procedure",
            "text": "some text\n",
            "location": {
              "line_nr": 1
            },
            "signature": ["first",
        "second"]
          }
        },
        null
      ],
      [
        "procedure foobar( first, second, ):  some text",
        {
          "foobar": {
            "name": "foobar",
            "type": "procedure",
            "text": "some text\n",
            "location": {
              "line_nr": 1
            },
            "signature": ["first",
        "second"]
          }
        },
        null
      ]
    ];
//.........................................................................................................
    for (i = 0, len = probes_and_matchers.length; i < len; i++) {
      [probe, matcher, error] = probes_and_matchers[i];
      await T.perform(probe, matcher, error, function() {
        return new Promise(async function(resolve, reject) {
          var result;
          // try
          result = (await IC.read_definitions_from_text(probe));
          // catch error
          //   return resolve error
          // debug '29929', result
          return resolve(result);
        });
      });
    }
    done();
    return null;
  };

  //###########################################################################################################
  if (module.parent == null) {
    test(this);
  }

  // test @[ "signatures" ]
// test @[ "oneliners" ]

}).call(this);

//# sourceMappingURL=main.test.js.map
